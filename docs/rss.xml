<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Functional Fieldnotes</title>
        <link>https://example.com/posts</link>
        <description>Functional Fieldnotes</description>
        <lastBuildDate>Mon, 10 Oct 2022 03:50:46 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Elmstatic</generator>
        <language>en</language>
        <image>
            <title>Functional Fieldnotes</title>
            <url>https://example.com/img/logo.png</url>
            <link>https://example.com/posts</link>
        </image>
        <copyright>Copyright: Author</copyright>
        <item>
            <title><![CDATA[The Pragmatic Programmer]]></title>
            <link>https://example.com/posts/2022-05-29-the-pragmatic-programmer</link>
            <guid>https://example.com/posts/2022-05-29-the-pragmatic-programmer</guid>
            <pubDate>Sun, 29 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Chapter 5: Your Knowledge Portfolio (Page 37 in pdf)

Goals

One new language every year -> exercism
One technical book each quarter

Chapter 20: Code Generators

Write Code that writes Codes.

This might resolve the need of meta programming, but is still subject to type-checking. Therefore is much more useful then Reflection....]]></description>
        </item>
        <item>
            <title><![CDATA[The Little Typer]]></title>
            <link>https://example.com/posts/2022-06-11-the-little-typer</link>
            <guid>https://example.com/posts/2022-06-11-the-little-typer</guid>
            <pubDate>Sat, 11 Jun 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[...]]></description>
        </item>
        <item>
            <title><![CDATA[Terminology Overview]]></title>
            <link>https://example.com/posts/2022-07-27-terminology-overview</link>
            <guid>https://example.com/posts/2022-07-27-terminology-overview</guid>
            <pubDate>Wed, 27 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[MODERN Terminology. If something is not here... maybe its outdated?

Code Structuring

Test Driven Design (TDD)

  Create tests first, then implement them and recheck if the tests work

  This does not mean to test everything. Or to have a test coverage of 80%.

  Video: Ian Cooper - TDD, Where did it all go wrong

Behaviour Driven Design (BDD)

  Same as TDD but rephrased: Create an executable Specification (can be a test), then implement it and check if the specification holds.

  Daniel Terho...]]></description>
        </item>
        <item>
            <title><![CDATA[Tracery.io]]></title>
            <link>https://example.com/posts/2022-09-18-tracery-io</link>
            <guid>https://example.com/posts/2022-09-18-tracery-io</guid>
            <pubDate>Sun, 18 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Practical Low-Effort PCG: Tracery and data-oriented PCG authoring
https://www.youtube.com/watch?v=Np9FRl847qM

Poems in an accidental language
https://www.youtube.com/watch?v=NlClzGbemu8

Image made with tracery:

made with tracery
...]]></description>
        </item>
        <item>
            <title><![CDATA[Some Thoughts on Test Driven Development]]></title>
            <link>https://example.com/posts/2022-09-22-Some-Thoughts-on-TDD</link>
            <guid>https://example.com/posts/2022-09-22-Some-Thoughts-on-TDD</guid>
            <pubDate>Thu, 22 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[tltr;
Make less tests with higher coverage.
Write that are more valuable than the time they take to run.
Use tests as requirements not as documentation.

What is TDD

The core idea of TDD is to first write down your requirements as tests and then implement them. If all tests passed, then you can assume that you implemented a correct soluction.

Video: Ian Cooper - TDD, Where did it all go wrong
Daniel Terhorst-North about the creation of BDD

"Behaviour Driven Development" will often be used to ...]]></description>
        </item>
        <item>
            <title><![CDATA[Simple Software]]></title>
            <link>https://example.com/posts/2022-10-05-simple-software</link>
            <guid>https://example.com/posts/2022-10-05-simple-software</guid>
            <pubDate>Wed, 05 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[I would describe my programming philosophy as "creating simple software".
Here is what i mean by that.

Keep it Simple and Stupid

There are a lot of programming paradims and trends floating around.
But for actual, every day work these are often a complete overkill.
Things may be simple and they may be boring. Thats good. That's exactly what we are looking after.
If a solution feels stupidly simple, then its a good indicator, that is is worth considering.

The part about keeping your programm st...]]></description>
        </item>
        <item>
            <title><![CDATA[Exploring Monads]]></title>
            <link>https://example.com/posts/2022-10-06-exploring-monads</link>
            <guid>https://example.com/posts/2022-10-06-exploring-monads</guid>
            <pubDate>Thu, 06 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Categories

> Categories are algebraically closed sets of functions.

We are mostly interested in functions from Types to Types or in other words, in the Category of Types.

Functors

A functor is a function from one category to another.

From a programmers perspective a functor is a structure for which the following function can be defined.

map: (a -> b) -> Functor -> Functor

Example:

map: (a -> b) -> Optional -> Optional

Semi-Group

A semi group has a combine function defined

combine: Sem...]]></description>
        </item>
        <item>
            <title><![CDATA[Functional Design Patterns]]></title>
            <link>https://example.com/posts/2022-10-06-functional-design-patterns</link>
            <guid>https://example.com/posts/2022-10-06-functional-design-patterns</guid>
            <pubDate>Thu, 06 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[There is this myth, that functional programming does not have any design patterns. See Functional Design Patterns by Scott Wlaschin

While this might hold for some of the more known patterns, it is definitely not true in general.
Design Patterns for Functional programming are generally more abstract, hard to pin it down to a use case. I would see it more like a set of tools that you can use, but don't have to.

Monad

A monad is a fancy word for a data structure with an andThen function:

andThe...]]></description>
        </item>
        <item>
            <title><![CDATA[Investigating Design Patterns]]></title>
            <link>https://example.com/posts/2022-10-08-investigating-design-patterns</link>
            <guid>https://example.com/posts/2022-10-08-investigating-design-patterns</guid>
            <pubDate>Sat, 08 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[There is this myth, that functional programming does not have any design patterns. See Functional Design Patterns by Scott Wlaschin

I wanted to know myself if this is actually a valid statement and if not how many design pattern are actually outdated in the days of functional programming. My language of choice will be Elm.

I will use ✅ for patterns that have a place in function programming and ❌ for patterns that are too easy to really call them a "pattern" or for patterns that are simply outd...]]></description>
        </item>
    </channel>
</rss>