<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Functional Fieldnotes</title>
        <link>https://orasund.github.io/posts</link>
        <description>Functional Fieldnotes</description>
        <lastBuildDate>Wed, 26 Oct 2022 14:54:16 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Elmstatic</generator>
        <language>en</language>
        <image>
            <title>Functional Fieldnotes</title>
            <url>https://orasund.github.io/img/logo.png</url>
            <link>https://orasund.github.io/posts</link>
        </image>
        <copyright>Copyright: Author</copyright>
        <item>
            <title><![CDATA[Reading: The Pragmatic Programmer]]></title>
            <link>https://orasund.github.io/posts/2022-05-29-Reading:-The-Pragmatic-Programmer</link>
            <guid>https://orasund.github.io/posts/2022-05-29-Reading:-The-Pragmatic-Programmer</guid>
            <pubDate>Sun, 29 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Chapter 5: Your Knowledge Portfolio (Page 37 in pdf)

Goals

One new language every year -> exercism
One technical book each quarter

Chapter 20: Code Generators

Write Code that writes Codes.

This might resolve the need of meta programming, but is still subject to type-checking. Therefore is much more useful then Reflection....]]></description>
        </item>
        <item>
            <title><![CDATA[Terminology Overview]]></title>
            <link>https://orasund.github.io/posts/2022-07-27-Terminology-Overview</link>
            <guid>https://orasund.github.io/posts/2022-07-27-Terminology-Overview</guid>
            <pubDate>Wed, 27 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[MODERN Terminology. If something is not here... maybe its outdated?

Code Structuring

Test Driven Design (TDD)

  Create tests first, then implement them and recheck if the tests work

  This does not mean to test everything. Or to have a test coverage of 80%.

  Video: Ian Cooper - TDD, Where did it all go wrong

Behaviour Driven Design (BDD)

  Same as TDD but rephrased: Create an executable Specification (can be a test), then implement it and check if the specification holds.

  Daniel Terho...]]></description>
        </item>
        <item>
            <title><![CDATA[Tracery Language]]></title>
            <link>https://orasund.github.io/posts/2022-09-18-Tracery-Language</link>
            <guid>https://orasund.github.io/posts/2022-09-18-Tracery-Language</guid>
            <pubDate>Sun, 18 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Practical Low-Effort PCG: Tracery and data-oriented PCG authoring
https://www.youtube.com/watch?v=Np9FRl847qM

Poems in an accidental language
https://www.youtube.com/watch?v=NlClzGbemu8

Image made with tracery:

made with tracery
...]]></description>
        </item>
        <item>
            <title><![CDATA[Some Thoughts On TDD]]></title>
            <link>https://orasund.github.io/posts/2022-09-22-Some-Thoughts-on-TDD</link>
            <guid>https://orasund.github.io/posts/2022-09-22-Some-Thoughts-on-TDD</guid>
            <pubDate>Thu, 22 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[tltr;
Make less tests with higher coverage.
Write that are more valuable than the time they take to run.
Use tests as requirements not as documentation.

What is TDD

The core idea of TDD is to first write down your requirements as tests and then implement them. If all tests passed, then you can assume that you implemented a correct soluction.

Video: Ian Cooper - TDD, Where did it all go wrong
Daniel Terhorst-North about the creation of BDD

"Behaviour Driven Development" will often be used to ...]]></description>
        </item>
        <item>
            <title><![CDATA[Simple Software]]></title>
            <link>https://orasund.github.io/posts/2022-10-05-simple-software</link>
            <guid>https://orasund.github.io/posts/2022-10-05-simple-software</guid>
            <pubDate>Wed, 05 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[I would describe my programming philosophy as "creating simple software".
Here is what i mean by that.

Keep it Simple and Stupid

There are a lot of programming paradims and trends floating around.
But for actual, every day work these are often a complete overkill.
Things may be simple and they may be boring. Thats good. That's exactly what we are looking after.
If a solution feels stupidly simple, then its a good indicator, that is is worth considering.

The part about keeping your programm st...]]></description>
        </item>
        <item>
            <title><![CDATA[Exploring Monads]]></title>
            <link>https://orasund.github.io/posts/2022-10-06-exploring-monads</link>
            <guid>https://orasund.github.io/posts/2022-10-06-exploring-monads</guid>
            <pubDate>Thu, 06 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Categories

> Categories are algebraically closed sets of functions.

We are mostly interested in functions from Types to Types or in other words, in the Category of Types.

Functors

A functor is a function from one category to another.

From a programmers perspective a functor is a structure for which the following function can be defined.

map: (a -> b) -> Functor -> Functor

Example:

map: (a -> b) -> Optional -> Optional

Semi-Group

A semi group has a combine function defined

combine: Sem...]]></description>
        </item>
        <item>
            <title><![CDATA[Functional Design Patterns]]></title>
            <link>https://orasund.github.io/posts/2022-10-06-functional-design-patterns</link>
            <guid>https://orasund.github.io/posts/2022-10-06-functional-design-patterns</guid>
            <pubDate>Thu, 06 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[There is this myth, that functional programming does not have any design patterns. See Functional Design Patterns by Scott Wlaschin

While this might hold for some of the more known patterns, it is definitely not true in general.
Design Patterns for Functional programming are generally more abstract, hard to pin it down to a use case. I would see it more like a set of tools that you can use, but don't have to.

Monad

A monad is a fancy word for a data structure with an andThen function:

andThe...]]></description>
        </item>
        <item>
            <title><![CDATA[Investigating Design Patterns]]></title>
            <link>https://orasund.github.io/posts/2022-10-08-investigating-design-patterns</link>
            <guid>https://orasund.github.io/posts/2022-10-08-investigating-design-patterns</guid>
            <pubDate>Sat, 08 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[There is this myth, that functional programming does not have any design patterns. See Functional Design Patterns by Scott Wlaschin

I wanted to know myself if this is actually a valid statement and if not how many design pattern are actually outdated in the days of functional programming. My language of choice will be Elm.

I will use ✅ for patterns that have a place in function programming and ❌ for patterns that are too easy to really call them a "pattern" or for patterns that are simply outd...]]></description>
        </item>
        <item>
            <title><![CDATA[Formal Methods, Type Theory And The Real World]]></title>
            <link>https://orasund.github.io/posts/2022-10-11-formal-methods,-type-theory-and-the-real-world</link>
            <guid>https://orasund.github.io/posts/2022-10-11-formal-methods,-type-theory-and-the-real-world</guid>
            <pubDate>Tue, 11 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[While studing at the university, I had the feeling, that there was this perfect solution out there, how to validate code. And the industry is just not seeing it.
Well, it turns out, I was the one not seeing the truth.

Formal Methods

Formal Methods was the holy grail of doing things right. JUST write a proof that your programm is currect and you're done.

Hore Calculus

The is to define a mathematical calculus, so that we can reason about computer programs.
That way we can actually prove that t...]]></description>
        </item>
        <item>
            <title><![CDATA[Relearn CSS]]></title>
            <link>https://orasund.github.io/posts/2022-10-11-Relearn-CSS</link>
            <guid>https://orasund.github.io/posts/2022-10-11-Relearn-CSS</guid>
            <pubDate>Tue, 11 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Lets Learn CSS in 2022.

Attribute selector

Source

[..]

Did you know you could write

[data-type='primary'] {
  color: red;
}

for

to make the color turn red?

You can also do

[data-type] {
  color: red;
}

if you are not interested in the value.

You can also do some pattern machting

/* A href that contains "example.com" */
[href*='example.com'] {
  color: red;
}

/* A href that starts with https */
[href^='https'] {
  color: green;
}

/* A href that ends with .com */
[href$='.com'] {
  c...]]></description>
        </item>
        <item>
            <title><![CDATA[Comparing Elm With Kotlin]]></title>
            <link>https://orasund.github.io/posts/2022-10-19-Comparing-Elm-With-Kotlin</link>
            <guid>https://orasund.github.io/posts/2022-10-19-Comparing-Elm-With-Kotlin</guid>
            <pubDate>Wed, 19 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[I'm using Kotlin at work and Elm for hobby project. Every now and then I forget that im using Kotlin and try to write Kotlin in a more functional Style - just like i would in Elm.

Today I want to showcase some of those gotcha moments and discuss reasons why Kotlin might have decided against a more functional approach.

Pattern Matching Pairs/Tuples

In Elm we like to use state machines to model our state. So something like the following might be considered idiomatic Elm.

type Model
    = Login...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading: Clean Code]]></title>
            <link>https://orasund.github.io/posts/2022-10-19-Reading:-Clean-Code</link>
            <guid>https://orasund.github.io/posts/2022-10-19-Reading:-Clean-Code</guid>
            <pubDate>Wed, 19 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[[Video: Hot Garbage: Clean Code Is Dead
](https://www.youtube.com/watch?v=s_fZFBgA11s)

Clean Code/DRY Code might be good to read an maintain, but bad to refactor. Using the Boy Scout Rule is a good way of making code slowly more "clean/DRY". But whenever you need to change something, you don't have to follow the "clean rules" - leave that to a later state in the development.

Podcast: A Path to Better Programming • Robert "Uncle Bob" Martin & Allen Holub • GOTO 2021

Bob Martin is questioning w...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading: The Clean Coder]]></title>
            <link>https://orasund.github.io/posts/2022-10-20-Reading:-The-Clean-Coder</link>
            <guid>https://orasund.github.io/posts/2022-10-20-Reading:-The-Clean-Coder</guid>
            <pubDate>Thu, 20 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[QA should find nothing

> You Must Know It Works

> How much of the code should be tested with these automated unit tests? All of it!

> Code is hard to test, because that code has been designed to be hard to test.

> You must be able to make changes without exorbitant costs.

> You ought to be able to describe all 24 patterns in the GOF book and have a working knowledge of many of the patterns in the POSA books.

-> Really not sure about this one. I have very strong feeling aobut GOF and just s...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading: Clean Architecture]]></title>
            <link>https://orasund.github.io/posts/2022-10-26-Reading:-Clean-Architecture</link>
            <guid>https://orasund.github.io/posts/2022-10-26-Reading:-Clean-Architecture</guid>
            <pubDate>Wed, 26 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[What is Design and Architecture

> There is no difference between them. None at all.

"Architecture" is used in context of high level. "Design" is more low level.

A Tale of two values

Paradigm Overview

Strucuted(Imperative) Programming, Object Oriented Programing and Functional Programming

Structured Programmings

Not use goto, use ifThenElse and while/for instead.

Object Oriented Programming

Functions and variables should be grouped by the Objects that they transform.

Functional Programm...]]></description>
        </item>
    </channel>
</rss>